import { promises as fs } from "fs"
import path from "path"
import { registry } from "../registry/index.js"

async function buildRegistryIndex() {
  let index = `/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.mts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<string, any> = {`
  
  for (const item of registry.items) {
    const componentPath = item.files?.[0]?.path
      ? `@/registry/bigblocks/${item.files[0].path}`
      : ""

    index += `
  "${item.name}": {
    name: "${item.name}",
    title: "${item.title || item.name}",
    description: "${item.description ?? ""}",
    type: "${item.type}",
    registryDependencies: ${JSON.stringify(item.registryDependencies)},
    files: [${item.files?.map((file) => {
      const filePath = `registry/bigblocks/${typeof file === "string" ? file : file.path}`
      return typeof file === "string"
        ? `"${filePath}"`
        : `{
      path: "${filePath}",
      type: "${file.type}",
      target: "${file.target ?? ""}"
    }`
    }).join(", ")}],
    component: ${
      componentPath
        ? `React.lazy(async () => {
      const mod = await import("${componentPath}")
      return { default: mod.StepIndicator || mod.default }
    })`
        : "null"
    },
    categories: ${JSON.stringify(item.categories)},
    dependencies: ${JSON.stringify(item.dependencies)},
  },`
  }

  // Add demo components
  index += `
  "step-indicator-demo": {
    name: "step-indicator-demo",
    title: "Step Indicator Demo",
    description: "Interactive demo of the step indicator component",
    type: "registry:example",
    files: [{
      path: "registry/bigblocks/examples/step-indicator-demo.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(() => import("@/registry/bigblocks/examples/step-indicator-demo.tsx")),
    categories: ["examples"],
  },`

  index += `
}`

  console.log(`✅ ${registry.items.length} BigBlocks components found`)

  // Write the index file
  await fs.writeFile(
    path.join(process.cwd(), "registry/__index__.tsx"),
    index
  )
  
  console.log("✅ Registry index generated")
}

// Also create example components
async function createExamples() {
  // Create step-indicator demo
  const stepIndicatorDemo = `"use client"

import { useState } from "react"
import { StepIndicator } from "@/registry/bigblocks/ui/step-indicator"

export default function StepIndicatorDemo() {
  const [activeStep, setActiveStep] = useState(1)
  
  const steps = [
    { id: "1", label: "Account", status: activeStep > 0 ? "complete" : activeStep === 0 ? "active" : "pending" },
    { id: "2", label: "Profile", status: activeStep > 1 ? "complete" : activeStep === 1 ? "active" : "pending" },
    { id: "3", label: "Settings", status: activeStep > 2 ? "complete" : activeStep === 2 ? "active" : "pending" },
    { id: "4", label: "Complete", status: activeStep > 3 ? "complete" : activeStep === 3 ? "active" : "pending" }
  ]

  return (
    <div className="w-full">
      <StepIndicator steps={steps} />
      <div className="mt-8 flex gap-2">
        <button 
          onClick={() => setActiveStep(Math.max(0, activeStep - 1))}
          className="px-4 py-2 border rounded hover:bg-gray-100"
        >
          Previous
        </button>
        <button 
          onClick={() => setActiveStep(Math.min(3, activeStep + 1))}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          Next
        </button>
      </div>
    </div>
  )
}`

  await fs.mkdir(path.join(process.cwd(), "registry/bigblocks/examples"), { recursive: true })
  await fs.writeFile(
    path.join(process.cwd(), "registry/bigblocks/examples/step-indicator-demo.tsx"),
    stepIndicatorDemo
  )
  
  console.log("✅ Example components created")
}

async function main() {
  await buildRegistryIndex()
  await createExamples()
}

main().catch(console.error)